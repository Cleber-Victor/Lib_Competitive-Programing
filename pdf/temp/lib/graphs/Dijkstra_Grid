const int ms = 501;
bool vis[ms][ms];
int n,m;
int grid[ms][ms];
int dist[ms][ms];

bool inRange(int x, int y){
  return x>=0 && x < n && y>=0 && y <m;
}
int dx[] = {0,0,1,-1};
int dy[] = {1,-1,0,0};
int bfs(){
  priority_queue<pair<int,pii>,vector<pair<int,pii>>,greater<pair<int,pii>>>pq;
  memset(vis,false,sizeof(vis));
  for(int i = 0; i < ms; i++) {
    for(int j = 0; j < ms; j++) {
        dist[i][j] = 1000000;
    }
}

  vis[0][0] = 1;
  dist[0][0]= 0;
  pq.push({0,{0,0}});
  int d = 0;
  while(!pq.empty()){
    int sz = pq.size();
    while(sz--){
      int d =pq.top().first;
      int x = pq.top().second.first;
      int y = pq.top().second.second;
      pq.pop();
      if(x == n-1 && y == m-1) return dist[n-1][m-1];
      for(int i = 0; i < 4; i++){
        int ax = x + dx[i], ay = y +dy[i];
        if(inRange(ax,ay) && !vis[ax][ay]){
          int camim = 1-grid[ax][ay];
          if(dist[x][y] + camim < dist[ax][ay]){
            vis[ax][ay] =1;
            dist[ax][ay] = dist[x][y] + camim;
            pq.push({dist[ax][ay],{ax,ay}});
          }
        }
      }
    }
  }
}